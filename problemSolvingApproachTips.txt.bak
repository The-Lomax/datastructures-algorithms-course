// UNDERSTANDING THE PROBLEM

// 1. Can i restate the problem in my own words?
// 2. What are the inputs, that go into the problem?
// 3. What are the outputs, that should come out from the solution of the problem?
// 4. Can the outputs be determined from the inputs? In other words, do i have enough information to solve the problem?
// 5. How should i label the important pieces of data, that are part of the problem?


// EXPLORE EXAMPLES
// 6. Start with simple examples
// 7. Progress to more complex examples
// 8. Explore examples with empty input
// 9. Explore examples with invalid input


// BREAK IT DOWN
// 10. Explicitly write out the steps you need to take
//     This forces you to think about the code you'll write before you write it,
//     and helps you catch any lingering conceptual issues or misunderstandings,
//     before you dive in and have to worry about details (like language syntax) as well.


// SOLVE / SIMPLIFY
// 11. Find the core difficulty in what you're trying to do
// 12. Temporarily ignore that difficulty
// 13. Write a simplified solution
// 14. Then incorporate that difficulty back in
