PROGRAMMING PATTERNS

1. Frequency counter - this pattern uses objects or sets to collect values/frequencies of values.
					   This can often avoid the need for nested loops or O(n2) operations with arrays or strings

2. Multiple pointers - Creating pointers or values that correspond to an index or position and move
					   towards the beginning, end or middle based on a certain condition. Very efficient for
					   solving problems with minimal space complexity as well.

3. Sliding window - involves creating a window which can either be an array or number from one position to another.
					Depending on a certain condition, the window either increases or closes (and new one is made).
					Very useful for keeping track of a subset of data in an array or string etc.

4. Divide and Conquer - this pattern involves dividing a data set into smaller chunks and then repeating a process
						with a subset of data. This pattern can heavily decrease time complexity.

5. Dynamic programming

6. Greedy algorithms

7. Backtracking